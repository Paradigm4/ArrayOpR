% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/afl_utils.R
\name{afl}
\alias{afl}
\title{Create AFL expressions from R expressions}
\usage{
afl(...)
}
\arguments{
\item{...}{In the ellipsis arg, only R infix functions \verb{\%name\%} are converted to operators,
All regular functions are first evaluated in the calling environment, and then convereted to strings
depending on the result types. ArrayOp => ArrayOp$to_afl(), v:NonEmptyVector => paste(v, collapse=','),
NULL is ignored.}
}
\value{
AFL string
}
\description{
This is a convenience function for AFL generation.
}
\details{
Any \code{a \%op_name\% b} call will be translated to \verb{\%op_name\%(a, b)} in R, then translated to AFL:
\code{op_name(a, b)}

Using this syntax, we can chain multiple AFL operators

E.g. \code{'array' \%filter\% 'a > 3 and b < 4' \%project\% c('a', 'b')}
will be translated into: \verb{project(filter(array, a > 3 and b < 4), 'a', 'b')}
Use NULL if no 2nd operand is needed. E.g. 'array' \%op_count\% NULL => op_count(array)
}
