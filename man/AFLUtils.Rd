% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/afl_utils.R
\name{AFLUtils}
\alias{AFLUtils}
\title{Convert filter expression(s) to AFL filter}
\description{
Convert filter expression(s) to AFL filter

Convert filter expression(s) to AFL filter
}
\seealso{
See \code{\link{e}} for more.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-e_to_afl_filter}{\code{AFLUtils$e_to_afl_filter()}}
\item \href{#method-args_to_expressions}{\code{AFLUtils$args_to_expressions()}}
\item \href{#method-e}{\code{AFLUtils$e()}}
\item \href{#method-e_merge}{\code{AFLUtils$e_merge()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-e_to_afl_filter"></a>}}
\if{latex}{\out{\hypertarget{method-e_to_afl_filter}{}}}
\subsection{Method \code{e_to_afl_filter()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AFLUtils$e_to_afl_filter(e, regex_func = "rsub", ignore_case = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{e}}{An R expression vector of length 1 or more}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An AFL filter string
Convert API ... args to an R expression vector

Some API functions include ... arg to represent arbitrary search criteria.
This provides flexibility and simplifies API function signatures, but only supports limited advanced search,
e.g. xxx_contains, xxx_range, xxx_not.

Eg. name_contains = 'str' => name \%contains\% 'str'
Eg. value_range = c(1, 9) => c(value >= 1, value <= 9)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-args_to_expressions"></a>}}
\if{latex}{\out{\hypertarget{method-args_to_expressions}{}}}
\subsection{Method \code{args_to_expressions()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AFLUtils$args_to_expressions(..., .param_list = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{API ellipsis arg}

\item{\code{.param_list}}{Explicitly provide a parameter list. If not NULL, the ellipsis params are ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
R expression vector
Create a list of R expressions

The ... ellipsis arg can include arbitrary expressions, where all names are preserved in their literal forms,
\strong{except} for those prefixed with !! (double exclamation marks) which will be evaluated to their actual values
in the calling environment.

Besides common comparison operators including \code{==}, \code{>}, \code{<}, \code{>=}, \code{<=}, \code{!=}, there are a few special operators
supported to ease AFL generation:
\itemize{
\item \code{\%in\%} semantically similar to R. \code{a \%in\% !!c(1,2,3)} will be translated to \verb{(a == 1 or a == 2 or a == 3)}
\item \verb{\%like\%} for string regex matching.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-e"></a>}}
\if{latex}{\out{\hypertarget{method-e}{}}}
\subsection{Method \code{e()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AFLUtils$e(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The ellipsis arg can have multiple items as expressions, but NO named items as in a named list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of R expressions
Merge multiple R expressions into one

Merge an ExprsList into a single Expression so that it can be used as a FilterExpr
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-e_merge"></a>}}
\if{latex}{\out{\hypertarget{method-e_merge}{}}}
\subsection{Method \code{e_merge()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AFLUtils$e_merge(el, mode = "AND")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{el}}{A list of R expressions}

\item{\code{mode}}{'AND' | 'OR'. Logical relationships when merging the expressions.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
R expression
}
}
}
