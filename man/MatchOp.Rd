% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_op.R
\name{MatchOp}
\alias{MatchOp}
\title{MatchOp}
\description{
MatchOp filter an ArrayOp's row records (or cells in Scidb term) by a 'template'.
}
\details{
Features:
\itemize{
\item No schema change (ie. same set of attrs/dims)
\item 'template' can be an R data frame or another ArrayOp
\item Can be implemented in differnt modes to optimize performance
}
}
\section{Super class}{
\code{\link[arrayop:ArrayOpBase]{arrayop::ArrayOpBase}} -> \code{MatchOp}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{MatchOp$new()}}
\item \href{#method-get_field_types}{\code{MatchOp$get_field_types()}}
\item \href{#method-.raw_afl}{\code{MatchOp$.raw_afl()}}
\item \href{#method-clone}{\code{MatchOp$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id=".to_afl_explicit">}\href{../../arrayop/html/ArrayOpBase.html#method-.to_afl_explicit}{\code{arrayop::ArrayOpBase$.to_afl_explicit()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="convert_df">}\href{../../arrayop/html/ArrayOpBase.html#method-convert_df}{\code{arrayop::ArrayOpBase$convert_df()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="create_new">}\href{../../arrayop/html/ArrayOpBase.html#method-create_new}{\code{arrayop::ArrayOpBase$create_new()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="duplicate_with_same_specs">}\href{../../arrayop/html/ArrayOpBase.html#method-duplicate_with_same_specs}{\code{arrayop::ArrayOpBase$duplicate_with_same_specs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="get_absent_fields">}\href{../../arrayop/html/ArrayOpBase.html#method-get_absent_fields}{\code{arrayop::ArrayOpBase$get_absent_fields()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="join">}\href{../../arrayop/html/ArrayOpBase.html#method-join}{\code{arrayop::ArrayOpBase$join()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="rename_fields">}\href{../../arrayop/html/ArrayOpBase.html#method-rename_fields}{\code{arrayop::ArrayOpBase$rename_fields()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="reshape">}\href{../../arrayop/html/ArrayOpBase.html#method-reshape}{\code{arrayop::ArrayOpBase$reshape()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="select">}\href{../../arrayop/html/ArrayOpBase.html#method-select}{\code{arrayop::ArrayOpBase$select()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="to_afl">}\href{../../arrayop/html/ArrayOpBase.html#method-to_afl}{\code{arrayop::ArrayOpBase$to_afl()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="to_df_afl">}\href{../../arrayop/html/ArrayOpBase.html#method-to_df_afl}{\code{arrayop::ArrayOpBase$to_df_afl()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="to_join_operand_afl">}\href{../../arrayop/html/ArrayOpBase.html#method-to_join_operand_afl}{\code{arrayop::ArrayOpBase$to_join_operand_afl()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="transform_unpack">}\href{../../arrayop/html/ArrayOpBase.html#method-transform_unpack}{\code{arrayop::ArrayOpBase$transform_unpack()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="where">}\href{../../arrayop/html/ArrayOpBase.html#method-where}{\code{arrayop::ArrayOpBase$where()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MatchOp$new(mainOperand, template, op_mode = "filter", on_left, on_right, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_field_types"></a>}}
\subsection{Method \code{get_field_types()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MatchOp$get_field_types(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.raw_afl"></a>}}
\subsection{Method \code{.raw_afl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MatchOp$.raw_afl()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MatchOp$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
