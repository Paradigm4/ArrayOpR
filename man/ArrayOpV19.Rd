% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/array_op_v19.R
\name{ArrayOpV19}
\alias{ArrayOpV19}
\title{Base class of all ArrayOp classes}
\description{
ArrayOp classes denote scidb array operations and operands, hence the name.
}
\details{
One operation consists of an scidb operator and \link{1..*} operands, of which the result can be used as an operand
in another operation. Operands and Opreration results can all be denoted by ArrayOp.
}
\section{Super class}{
\code{\link[arrayop:ArrayOpBase]{arrayop::ArrayOpBase}} -> \code{ArrayOpV19}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-clone}{\code{ArrayOpV19$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id=".get_meta">}\href{../../arrayop/html/ArrayOpBase.html#method-.get_meta}{\code{arrayop::ArrayOpBase$.get_meta()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id=".set_meta">}\href{../../arrayop/html/ArrayOpBase.html#method-.set_meta}{\code{arrayop::ArrayOpBase$.set_meta()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id=".to_afl_explicit">}\href{../../arrayop/html/ArrayOpBase.html#method-.to_afl_explicit}{\code{arrayop::ArrayOpBase$.to_afl_explicit()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id=".to_join_operand_afl">}\href{../../arrayop/html/ArrayOpBase.html#method-.to_join_operand_afl}{\code{arrayop::ArrayOpBase$.to_join_operand_afl()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="build_new">}\href{../../arrayop/html/ArrayOpBase.html#method-build_new}{\code{arrayop::ArrayOpBase$build_new()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="change_schema">}\href{../../arrayop/html/ArrayOpBase.html#method-change_schema}{\code{arrayop::ArrayOpBase$change_schema()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="create_array_cmd">}\href{../../arrayop/html/ArrayOpBase.html#method-create_array_cmd}{\code{arrayop::ArrayOpBase$create_array_cmd()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="create_new">}\href{../../arrayop/html/ArrayOpBase.html#method-create_new}{\code{arrayop::ArrayOpBase$create_new()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="create_new_with_same_schema">}\href{../../arrayop/html/ArrayOpBase.html#method-create_new_with_same_schema}{\code{arrayop::ArrayOpBase$create_new_with_same_schema()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="get_absent_fields">}\href{../../arrayop/html/ArrayOpBase.html#method-get_absent_fields}{\code{arrayop::ArrayOpBase$get_absent_fields()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="get_dim_specs">}\href{../../arrayop/html/ArrayOpBase.html#method-get_dim_specs}{\code{arrayop::ArrayOpBase$get_dim_specs()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="get_field_types">}\href{../../arrayop/html/ArrayOpBase.html#method-get_field_types}{\code{arrayop::ArrayOpBase$get_field_types()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="initialize">}\href{../../arrayop/html/ArrayOpBase.html#method-initialize}{\code{arrayop::ArrayOpBase$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="join">}\href{../../arrayop/html/ArrayOpBase.html#method-join}{\code{arrayop::ArrayOpBase$join()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="load_file">}\href{../../arrayop/html/ArrayOpBase.html#method-load_file}{\code{arrayop::ArrayOpBase$load_file()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="match">}\href{../../arrayop/html/ArrayOpBase.html#method-match}{\code{arrayop::ArrayOpBase$match()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="mutate">}\href{../../arrayop/html/ArrayOpBase.html#method-mutate}{\code{arrayop::ArrayOpBase$mutate()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="overwrite">}\href{../../arrayop/html/ArrayOpBase.html#method-overwrite}{\code{arrayop::ArrayOpBase$overwrite()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="remove_array_cmd">}\href{../../arrayop/html/ArrayOpBase.html#method-remove_array_cmd}{\code{arrayop::ArrayOpBase$remove_array_cmd()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="remove_array_versions_cmd">}\href{../../arrayop/html/ArrayOpBase.html#method-remove_array_versions_cmd}{\code{arrayop::ArrayOpBase$remove_array_versions_cmd()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="reshape">}\href{../../arrayop/html/ArrayOpBase.html#method-reshape}{\code{arrayop::ArrayOpBase$reshape()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="select">}\href{../../arrayop/html/ArrayOpBase.html#method-select}{\code{arrayop::ArrayOpBase$select()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="set_anti_collision_field">}\href{../../arrayop/html/ArrayOpBase.html#method-set_anti_collision_field}{\code{arrayop::ArrayOpBase$set_anti_collision_field()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="set_auto_fields">}\href{../../arrayop/html/ArrayOpBase.html#method-set_auto_fields}{\code{arrayop::ArrayOpBase$set_auto_fields()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="set_auto_increment_field">}\href{../../arrayop/html/ArrayOpBase.html#method-set_auto_increment_field}{\code{arrayop::ArrayOpBase$set_auto_increment_field()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="set_null_fields">}\href{../../arrayop/html/ArrayOpBase.html#method-set_null_fields}{\code{arrayop::ArrayOpBase$set_null_fields()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="spawn">}\href{../../arrayop/html/ArrayOpBase.html#method-spawn}{\code{arrayop::ArrayOpBase$spawn()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="to_afl">}\href{../../arrayop/html/ArrayOpBase.html#method-to_afl}{\code{arrayop::ArrayOpBase$to_afl()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="to_df_afl">}\href{../../arrayop/html/ArrayOpBase.html#method-to_df_afl}{\code{arrayop::ArrayOpBase$to_df_afl()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="to_schema_str">}\href{../../arrayop/html/ArrayOpBase.html#method-to_schema_str}{\code{arrayop::ArrayOpBase$to_schema_str()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="update">}\href{../../arrayop/html/ArrayOpBase.html#method-update}{\code{arrayop::ArrayOpBase$update()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="where">}\href{../../arrayop/html/ArrayOpBase.html#method-where}{\code{arrayop::ArrayOpBase$where()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="arrayop" data-topic="ArrayOpBase" data-id="write_to">}\href{../../arrayop/html/ArrayOpBase.html#method-write_to}{\code{arrayop::ArrayOpBase$write_to()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ArrayOpV19$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
